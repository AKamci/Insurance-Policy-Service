plugins {
	id 'org.springframework.boot' version '3.1.6'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'java'
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.slf4j:slf4j-api'
	implementation 'org.apache.logging.log4j:log4j-api'
	implementation 'org.apache.logging.log4j:log4j-core'
	implementation 'org.apache.logging.log4j:log4j-slf4j-impl'
	implementation 'org.mapstruct:mapstruct:1.6.2'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'ch.qos.logback:logback-classic'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	implementation 'jakarta.persistence:jakarta.persistence-api'
	implementation 'org.springframework.statemachine:spring-statemachine-starter:3.0.0'
	runtimeOnly 'org.postgresql:postgresql'
	compileOnly 'org.projectlombok:lombok:1.18.22'
	annotationProcessor 'org.projectlombok:lombok:1.18.22'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.2'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.withType(JavaCompile).configureEach {
	options.annotationProcessorPath = configurations.annotationProcessor
}

test {
	useJUnitPlatform()
}

springBoot {
	mainClass = 'PolicyProject.policyService.PolicyServiceApplication'
}
